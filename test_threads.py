#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º (threads) –≤ –∫–∞–Ω–∞–ª–∞—Ö –∏ —Ñ–æ—Ä—É–º–∞—Ö.
"""

from __future__ import annotations

import asyncio
import os
from datetime import datetime, timezone

import db
from summarizer import build_messages_block, summarize_messages_text


def test_database_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º."""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    with db.get_connection() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cur = conn.execute("PRAGMA table_info(messages);")
        columns = cur.fetchall()
        
        print("üìã –ö–æ–ª–æ–Ω–∫–∏ —Ç–∞–±–ª–∏—Ü—ã messages:")
        for col in columns:
            print(f"   {col[1]} ({col[2]}) - {'NOT NULL' if col[3] else 'NULL'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å—ã
        cur = conn.execute("PRAGMA index_list(messages);")
        indexes = cur.fetchall()
        
        print("\nüìä –ò–Ω–¥–µ–∫—Å—ã:")
        for idx in indexes:
            print(f"   {idx[1]} ({'UNIQUE' if idx[2] else 'NON-UNIQUE'})")


def add_test_messages():
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ thread_id."""
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    test_chat_id = -1001234567890  # –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä—É–º-—á–∞—Ç
    now = datetime.now(timezone.utc)
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —á–∞—Ç–µ (–±–µ–∑ —Ç–µ–º—ã)
    db.add_message(test_chat_id, "–ê–ª–∏—Å–∞", "–û–±—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö", now)
    db.add_message(test_chat_id, "–ë–æ–±", "–°–æ–≥–ª–∞—Å–µ–Ω —Å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º", now)
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ 1 (–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞)
    db.add_message(test_chat_id, "–ö–ª–∏–µ–Ω—Ç1", "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –∑–∞–∫–∞–∑–æ–º #123", now, message_thread_id=1)
    db.add_message(test_chat_id, "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –∑–∞–∫–∞–∑", now, message_thread_id=1)
    db.add_message(test_chat_id, "–ö–ª–∏–µ–Ω—Ç1", "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å!", now, message_thread_id=1)
    
    # –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–º–µ 2 (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
    db.add_message(test_chat_id, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫1", "–†–µ–ª–∏–∑ –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", now, message_thread_id=2)
    db.add_message(test_chat_id, "–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫", "–ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π", now, message_thread_id=2)
    db.add_message(test_chat_id, "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫1", "–ò—Å–ø—Ä–∞–≤–∏–ª –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–∞–≥–∏", now, message_thread_id=2)
    
    print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ 8 —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")


def test_thread_queries():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º."""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —Ç–µ–º–∞–º–∏...")
    
    test_chat_id = -1001234567890
    since_time = datetime.now(timezone.utc)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
    thread_ids = db.get_active_thread_ids_for_chat_since(test_chat_id, since_time)
    print(f"üìã –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã: {thread_ids}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
    for thread_id in thread_ids:
        messages = db.get_messages_for_chat_since(test_chat_id, since_time, thread_id)
        thread_name = f"–¢–µ–º–∞ {thread_id}" if thread_id else "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç"
        print(f"\nüîñ {thread_name} ({len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π):")
        
        for msg in messages:
            print(f"   {msg.user_name}: {msg.message_text}")


async def test_summarization():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º."""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–∞–º...")
    
    from bot import summarize_messages_for_chat
    
    test_chat_id = -1001234567890
    
    try:
        summary = await summarize_messages_for_chat(test_chat_id)
        if summary:
            print("‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ:")
            print(summary)
        else:
            print("‚ùå –°–∞–º–º–∞—Ä–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {e}")


def cleanup_test_data():
    """–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    test_chat_id = -1001234567890
    
    with db.get_connection() as conn:
        cur = conn.execute("DELETE FROM messages WHERE chat_id = ?", (test_chat_id,))
        deleted = cur.rowcount
        conn.commit()
        
    print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ–º –≤ Telegram-–±–æ—Ç–µ")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db.initialize_database()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
    test_database_structure()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    add_test_messages()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    test_thread_queries()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏—é (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
    gemini_key = os.environ.get("GEMINI_API_KEY")
    if gemini_key:
        await test_summarization()
    else:
        print("\n‚ö†Ô∏è  GEMINI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∞–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏")
    
    # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    cleanup_test_data()
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    asyncio.run(main())
